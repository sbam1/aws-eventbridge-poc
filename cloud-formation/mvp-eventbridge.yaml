AWSTemplateFormatVersion: '2010-09-09'
Description: MVP - EventBridge, Step Function, API Gateway

Resources:

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: event-bus

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-eventbridge-mvp-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MVPExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - events:PutEvents
                Resource: "*"

  EventValidatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: event-validator
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          // version: v2 - simulating jsonNate-like transformation
          exports.handler = async (event) => {
            const detail = event.detail || {};
            const transformed = {
              ...detail,
              enriched: true,
              uppercasedMessage: (detail.message || "").toUpperCase(),
              timestamp: new Date().toISOString()
            };
            return {
              ...event,
              detail: transformed
            };
          };

  PutBackToEventBridgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: put-back-eventbridge
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          // version: v1 - SDK v2, compatible with Node.js 16
          const AWS = require('aws-sdk');
          const eb = new AWS.EventBridge();
          exports.handler = async (event) => {
            await eb.putEvents({
              Entries: [{
                Source: "modified.message",
                DetailType: "modified",
                Detail: JSON.stringify(event.detail),
                EventBusName: "event-bus"
              }]
            }).promise();
            return { status: 'sent' };
          };

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: stepfunction-mvp-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionMVPPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: mvp-notification-processor
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString:
        !Sub |
          {
            "StartAt": "ValidateEvent",
            "States": {
              "ValidateEvent": {
                "Type": "Task",
                "Resource": "${EventValidatorFunction.Arn}",
                "Next": "PutBackEvent"
              },
              "PutBackEvent": {
                "Type": "Task",
                "Resource": "${PutBackToEventBridgeFunction.Arn}",
                "End": true
              }
            }
          }

  EventBridgeInvokeStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eventbridge-start-stepfunction-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartStepFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt StateMachine.Arn

  EventRuleTriggerStepFunction:
    Type: AWS::Events::Rule
    Properties:
      Name: trigger-step-function
      Description: Trigger Step Function from EventBridge
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - "manual.test"
        detail-type:
          - "initiate"
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          Id: "StartStepFunction"
          RoleArn: !GetAtt EventBridgeInvokeStepFunctionRole.Arn

  ApiGatewayPutEventFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: api-put-eventbridge
      Runtime: nodejs16.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          // version: v1 - API Gateway handler to forward to EventBridge
          const AWS = require('aws-sdk');
          const eb = new AWS.EventBridge();
          exports.handler = async (event) => {
            const body = JSON.parse(event.body || '{}');
            await eb.putEvents({
              Entries: [{
                Source: "manual.test",
                DetailType: "initiate",
                Detail: JSON.stringify(body),
                EventBusName: "event-bus"
              }]
            }).promise();
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Event sent to EventBridge' })
            };
          };

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: eventbridge-mvp-api
      EndpointConfiguration:
        Types: [REGIONAL]

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: submit

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayPutEventFunction.Arn}/invocations

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiGatewayPutEventFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/submit

Outputs:
  ApiUrl:
    Description: "POST endpoint to trigger the EventBridge pipeline"
    Value:
      Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/submit
